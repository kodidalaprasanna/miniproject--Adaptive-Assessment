import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
file_path = 'student-por.csv'
data = pd.read_csv(file_path)
selected_combinations = [
    ['Medu', 'Fedu', 'studytime'],
    ['Medu', 'Fedu', 'G1', 'G3'],
    ['age', 'absences', 'studytime'],
    ['G1', 'G2', 'G3'],
    ['Dalc', 'Walc'],
    ['freetime', 'goout'],
    ['Medu', 'Fedu', 'age', 'absences'],
    ['Medu', 'Fedu', 'studytime', 'G1', 'G3'],
]
def evaluate_kmeans(attributes):
    features = data[attributes]
    scaler = StandardScaler()
    features_scaled = scaler.fit_transform(features)
    pca = PCA(n_components=2)
    features_pca = pca.fit_transform(features_scaled)
    best_k = 2
    best_silhouette_avg = -1
    best_y_pred = None
    for k in range(2, 11):
        kmeans = KMeans(n_clusters=k, init='k-means++', n_init=10, random_state=1)
        y_pred = kmeans.fit_predict(features_pca)
        silhouette_avg = silhouette_score(features_pca, y_pred) 
        if silhouette_avg > best_silhouette_avg:
            best_silhouette_avg = silhouette_avg
            best_k = k
            best_y_pred = y_pred
    return best_silhouette_avg, features_pca, best_y_pred
results = []
for comb in selected_combinations:
    score, features_pca, y_pred = evaluate_kmeans(comb)
    results.append((comb, score, features_pca, y_pred))
best_combination, best_score, best_features_pca, best_y_pred = max(results, key=lambda x: x[1])
print(f'Best combination: {best_combination}')
print(f'Best silhouette score: {best_score}')
plt.figure(figsize=(10, 7))
sns.scatterplot(x=best_features_pca[:, 0], y=best_features_pca[:, 1], hue=best_y_pred, palette='viridis', legend='full')
plt.title('Best KMeans Clustering Result')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend(title='Cluster')
plt.grid(True)
plt.show()